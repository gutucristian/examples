import argparse
import logging
import json
import json_flatten
import sys
import os
from multiprocessing import Pool

# original_basepath = "original"
# new_basebath = "new"
# diff_basepath = "diff"
custom_mappings: dict = {}

original_basepath = "C:\\Users\\x240801\\IdeaProjects\\cashvaluequoteavroevent\\target\\test-classes\\test\\data\\json\\input"
new_basebath = "C:\\Users\\x240801\\IdeaProjects\\cashvaluequoteavroevent\\target\\test-classes\\test\\data\\json\\output"
diff_basepath = "C:\\Users\\x240801\\scripts\\diffTool\\diff"
custom_mappings_path = "C:\\Users\\x240801\\scripts\\diffTool"

# custom_mappings = sys.argv[1]

os.chdir(custom_mappings_path)

with open('./customMappingsCVQ.json', 'r') as reader:
    custom_mappings = json.loads(reader.read())

def clean_empty(d):
    if not isinstance(d, (dict, list)):
        return d
    if isinstance(d, list):
        return [v for v in (clean_empty(v) for v in d) if v]
    return {k: v for k, v in ((k, clean_empty(v)) for k, v in d.items()) if v}

def make_lowercase(obj):
    if hasattr(obj,'iteritems'):
        # dictionary
        ret = {}
        for k,v in obj.iteritems():
            ret[make_lowercase(k)] = make_lowercase(v)
        return ret
    elif isinstance(obj,str):
        # string
        return obj.lower()
    elif hasattr(obj,'__iter__'):
        # list (or the like)
        ret = []
        for item in obj:
            ret.append(make_lowercase(item))
        return ret
    else:
        # anything else
        return obj

def json_diff(original_JSON_file:str) -> dict:
    '''
    Compute difference between left and right JSON objects

    :param dict left: left JSON object (original JSON)  
    :param dict right: right JSON object (JSON generated by MSP)
    :param dict custom_mappings: JSON object detailing left to right custom mappings
    :return difference between left and right JSON objects    
    :rtype: dict
    '''

    print("Computing diff for: " + original_JSON_file)

    left: dict = {}
    
    right: dict = {}

    os.chdir(original_basepath)

    with open('{}/{}'.format(original_basepath, original_JSON_file), 'r') as f:
        left = json.loads(f.read())

    os.chdir(new_basebath)

    with open('{}/{}'.format(new_basebath, original_JSON_file), 'r') as f:
        right = json.loads(f.read())

    # pickup "PayLoad" section of left JSON for comparison
    left: dict = left["PayLoad"]

    # pickup "payLoad" section of right JSON for comparison
    right: dict = right["eventMessage"]["eventAttributes"]["dataElements"]["payLoad"] 

    # print("Flattening 'left' JSON...")
    left_flattened = json_flatten.flatten(left)

    # print("Convert 'left' JSON keys to lowercase...")
    left_flattened = {k.lower(): v for k, v in left_flattened.items()}

    # print("Flattening 'right' JSON...")
    right_flattened = json_flatten.flatten(right)    

    # print("Convert 'right' JSON keys to lowercase...")
    # right_flattened = {k.lower(): v for k, v in right_flattened.items() if v != "" and v != 'None'}
    right_flattened = {k.lower(): v for k, v in right_flattened.items()}    

    diff = {}

    # print("original JSON size = " + str(len(left_flattened)))
    # print("new JSON size = " + str(len(right_flattened)))

    diff["DiffStatistics"] = {
        "OriginalJSONSize": str(len(left_flattened)),
        "NewJSONSize": len(right_flattened),
        "Delta": abs(len(left_flattened) - len(right_flattened))        
    }

    found_diff: bool = False

    '''
    Validate that all keys from left JSON exist in generated JSON
    and that their values correspond.
    '''
    for k, v in left_flattened.items():

        if "fund.funddata" in k:
            i = 5

        k = handle_custom_mapping(k, custom_mappings)

        path = ""
        val = clean_empty(right)
        val = eval(repr(val).lower()) # set val to original right dictionary, where everything is lowercase
        replace_key = False
        for key in k.split("."): 
            if key.isnumeric() == False and key not in val:
                path += key
                break
            if key in val:
                if isinstance(val[key], list) and len(val[key]) == 1:
                    replace_key = True
                    path += key + ".0."
                    val = val[key][0]
                else:                                
                    path += key + "."                
                    val = val[key]        
            if key.isnumeric():                              
                path += key + "."            
                val = val[int(key)]            

        if path[len(path) - 1] == ".":
            path = path[:len(path) - 1] # remove last "."

        if replace_key: 
            k = path       

        if k not in right_flattened:
            diff[k] = {
                "Explanation": "Key '{}' with value '{}' is not present in right JSON".format(k, v)
            }
            found_diff = True   
        elif right_flattened[k] != v:      
            diff[k] = {
                "Explanation": "Value at key '{}' does not match".format(k),
                "Expected": v,
                "Actual": right_flattened[k]
            }
            found_diff = True

    if found_diff:
        os.chdir(diff_basepath)
        with open('{}/{}'.format(diff_basepath, original_JSON_file), 'w') as f:
            f.write(json.dumps(diff, indent = 2))

    # return diff, found_diff

def handle_custom_mapping(k, custom_mapping_template) -> str:
    for key, val in custom_mapping_template.items():
        if key in k:
            k = k.replace(key, val)
            break
    return k

if __name__ == "__main__":
    # parser = argparse.ArgumentParser(description='Tool to compute difference between JSON payloads')
    # parser.add_argument('-o', help='directory with original JSON payloads', required=True)
    # parser.add_argument('-n', help='directory with new MSP JSON payloads', required=True)
    # parser.add_argument('-c', help='directory of JSON file with custom mapping deffinitions')
    # args = parser.parse_args()

    # print(args)

    # if args_len < 3 or args_len > 4: 
    #     sys.exit("usage: diff.py original_JSON new_JSON [custom_mappings_JSON]")

    os.chdir(original_basepath)

    # original_JSON_files = os.listdir(original_basepath)
    original_JSON_files = os.listdir()    

    p = Pool(4)
    p.map(json_diff, original_JSON_files)
